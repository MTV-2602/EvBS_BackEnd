package com.evbs.BackEndEvBs.controller;

import com.evbs.BackEndEvBs.entity.Battery;
import com.evbs.BackEndEvBs.entity.SwapTransaction;
import com.evbs.BackEndEvBs.entity.User;
import com.evbs.BackEndEvBs.entity.Vehicle;
import com.evbs.BackEndEvBs.exception.exceptions.NotFoundException;
import com.evbs.BackEndEvBs.repository.BatteryRepository;
import com.evbs.BackEndEvBs.repository.SwapTransactionRepository;
import com.evbs.BackEndEvBs.repository.VehicleRepository;
import com.evbs.BackEndEvBs.service.AuthenticationService;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Controller ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin pin c·ªßa xe
 * - Driver xem pin hi·ªán t·∫°i ƒëang d√πng
 * - Driver xem l·ªãch s·ª≠ ƒë·ªïi pin
 * - Admin xem t·∫•t c·∫£ xe ƒëang d√πng pin n√†o
 */
@RestController
@RequestMapping("/api/vehicle-battery")
@RequiredArgsConstructor
@SecurityRequirement(name = "api")
public class VehicleBatteryController {

    private final VehicleRepository vehicleRepository;
    private final SwapTransactionRepository swapTransactionRepository;
    private final BatteryRepository batteryRepository;
    private final AuthenticationService authenticationService;

    /**
     * üöó Driver xem pin hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng
     * GET /api/vehicle-battery/my-current-battery
     */
    @GetMapping("/my-current-battery")
    @PreAuthorize("hasAuthority('DRIVER')")
    public ResponseEntity<Map<String, Object>> getMyCurrentBattery() {
        User currentUser = authenticationService.getCurrentUser();

        // L·∫•y t·∫•t c·∫£ vehicles c·ªßa driver
        List<Vehicle> vehicles = vehicleRepository.findByDriver(currentUser);

        if (vehicles.isEmpty()) {
            return ResponseEntity.ok(Map.of(
                "message", "B·∫°n ch∆∞a c√≥ xe n√†o trong h·ªá th·ªëng",
                "vehicles", Collections.emptyList()
            ));
        }

        // L·∫•y pin hi·ªán t·∫°i c·ªßa m·ªói xe
        List<Map<String, Object>> vehiclesWithBattery = vehicles.stream()
                .map(vehicle -> {
                    Map<String, Object> info = new HashMap<>();
                    info.put("vehicleId", vehicle.getId());
                    info.put("model", vehicle.getModel());
                    info.put("plateNumber", vehicle.getPlateNumber());

                    // T√¨m swap transaction g·∫ßn nh·∫•t
                    Optional<SwapTransaction> lastSwap = swapTransactionRepository
                            .findTopByVehicleAndStatusOrderByStartTimeDesc(
                                    vehicle, 
                                    SwapTransaction.Status.COMPLETED
                            );

                    if (lastSwap.isPresent() && lastSwap.get().getSwapOutBattery() != null) {
                        Battery currentBattery = lastSwap.get().getSwapOutBattery();
                        info.put("currentBattery", Map.of(
                            "batteryId", currentBattery.getId(),
                            "model", currentBattery.getModel(),
                            "chargeLevel", currentBattery.getChargeLevel(),
                            "stateOfHealth", currentBattery.getStateOfHealth(),
                            "status", currentBattery.getStatus(),
                            "lastSwapTime", lastSwap.get().getStartTime()
                        ));
                        info.put("hasBattery", true);
                    } else {
                        info.put("currentBattery", null);
                        info.put("hasBattery", false);
                        info.put("message", "Xe ch∆∞a c√≥ pin (ch∆∞a swap l·∫ßn n√†o)");
                    }

                    return info;
                })
                .collect(Collectors.toList());

        return ResponseEntity.ok(Map.of(
            "vehicles", vehiclesWithBattery,
            "totalVehicles", vehicles.size()
        ));
    }

    /**
     * üöó Driver xem pin c·ªßa xe c·ª• th·ªÉ
     * GET /api/vehicle-battery/{vehicleId}/current
     */
    @GetMapping("/{vehicleId}/current")
    @PreAuthorize("hasAuthority('DRIVER')")
    public ResponseEntity<Map<String, Object>> getCurrentBattery(@PathVariable Long vehicleId) {
        User currentUser = authenticationService.getCurrentUser();

        Vehicle vehicle = vehicleRepository.findById(vehicleId)
                .orElseThrow(() -> new NotFoundException("Vehicle not found"));

        // Check ownership
        if (!vehicle.getDriver().getId().equals(currentUser.getId())) {
            return ResponseEntity.status(403).body(Map.of(
                "error", "Xe n√†y kh√¥ng thu·ªôc v·ªÅ b·∫°n"
            ));
        }

        // T√¨m swap transaction g·∫ßn nh·∫•t
        Optional<SwapTransaction> lastSwap = swapTransactionRepository
                .findTopByVehicleAndStatusOrderByStartTimeDesc(
                        vehicle, 
                        SwapTransaction.Status.COMPLETED
                );

        if (lastSwap.isEmpty() || lastSwap.get().getSwapOutBattery() == null) {
            return ResponseEntity.ok(Map.of(
                "vehicleId", vehicleId,
                "message", "Xe ch∆∞a c√≥ pin (ch∆∞a swap l·∫ßn n√†o)",
                "hasBattery", false
            ));
        }

        Battery currentBattery = lastSwap.get().getSwapOutBattery();
        SwapTransaction transaction = lastSwap.get();

        return ResponseEntity.ok(Map.of(
            "vehicleId", vehicleId,
            "vehicleModel", vehicle.getModel(),
            "plateNumber", vehicle.getPlateNumber(),
            "hasBattery", true,
            "currentBattery", Map.of(
                "batteryId", currentBattery.getId(),
                "model", currentBattery.getModel(),
                "chargeLevel", currentBattery.getChargeLevel(),
                "capacity", currentBattery.getCapacity(),
                "stateOfHealth", currentBattery.getStateOfHealth(),
                "status", currentBattery.getStatus(),
                "manufactureDate", currentBattery.getManufactureDate(),
                "usageCount", currentBattery.getUsageCount()
            ),
            "lastSwap", Map.of(
                "transactionId", transaction.getId(),
                "swapTime", transaction.getStartTime(),
                "stationName", transaction.getStation().getName(),
                "oldBatteryId", transaction.getSwapInBattery() != null ? transaction.getSwapInBattery().getId() : null
            )
        ));
    }

    /**
     * üìú Driver xem l·ªãch s·ª≠ ƒë·ªïi pin c·ªßa xe
     * GET /api/vehicle-battery/{vehicleId}/history
     */
    @GetMapping("/{vehicleId}/history")
    @PreAuthorize("hasAuthority('DRIVER')")
    public ResponseEntity<Map<String, Object>> getBatterySwapHistory(@PathVariable Long vehicleId) {
        User currentUser = authenticationService.getCurrentUser();

        Vehicle vehicle = vehicleRepository.findById(vehicleId)
                .orElseThrow(() -> new NotFoundException("Vehicle not found"));

        // Check ownership
        if (!vehicle.getDriver().getId().equals(currentUser.getId())) {
            return ResponseEntity.status(403).body(Map.of(
                "error", "Xe n√†y kh√¥ng thu·ªôc v·ªÅ b·∫°n"
            ));
        }

        // L·∫•y t·∫•t c·∫£ swap transactions c·ªßa xe
        List<SwapTransaction> swapHistory = swapTransactionRepository
                .findByVehicleOrderByStartTimeDesc(vehicle);

        List<Map<String, Object>> history = swapHistory.stream()
                .map(swap -> {
                    Map<String, Object> record = new HashMap<>();
                    record.put("transactionId", swap.getId());
                    record.put("swapTime", swap.getStartTime());
                    record.put("endTime", swap.getEndTime());
                    record.put("status", swap.getStatus());
                    record.put("station", Map.of(
                        "id", swap.getStation().getId(),
                        "name", swap.getStation().getName()
                    ));

                    if (swap.getSwapOutBattery() != null) {
                        record.put("batteryReceived", Map.of(
                            "batteryId", swap.getSwapOutBattery().getId(),
                            "model", swap.getSwapOutBattery().getModel(),
                            "chargeLevel", swap.getSwapOutBattery().getChargeLevel()
                        ));
                    }

                    if (swap.getSwapInBattery() != null) {
                        record.put("batteryReturned", Map.of(
                            "batteryId", swap.getSwapInBattery().getId(),
                            "model", swap.getSwapInBattery().getModel(),
                            "chargeLevel", swap.getSwapInBattery().getChargeLevel()
                        ));
                    }

                    // totalCost c√≥ th·ªÉ null n·∫øu ch∆∞a t√≠nh
                    return record;
                })
                .collect(Collectors.toList());

        return ResponseEntity.ok(Map.of(
            "vehicleId", vehicleId,
            "totalSwaps", history.size(),
            "swapHistory", history
        ));
    }

    /**
     * üîß Admin xem t·∫•t c·∫£ xe ƒëang d√πng pin n√†o
     * GET /api/vehicle-battery/admin/all-vehicles-with-battery
     */
    @GetMapping("/admin/all-vehicles-with-battery")
    @PreAuthorize("hasAnyAuthority('ADMIN', 'STAFF')")
    public ResponseEntity<Map<String, Object>> getAllVehiclesWithBattery() {
        List<Vehicle> allVehicles = vehicleRepository.findAll();

        List<Map<String, Object>> vehiclesInfo = allVehicles.stream()
                .map(vehicle -> {
                    Map<String, Object> info = new HashMap<>();
                    info.put("vehicleId", vehicle.getId());
                    info.put("model", vehicle.getModel());
                    info.put("plateNumber", vehicle.getPlateNumber());
                    info.put("driver", Map.of(
                        "driverId", vehicle.getDriver().getId(),
                        "fullName", vehicle.getDriver().getFullName(),
                        "email", vehicle.getDriver().getEmail()
                    ));

                    // T√¨m pin hi·ªán t·∫°i
                    Optional<SwapTransaction> lastSwap = swapTransactionRepository
                            .findTopByVehicleAndStatusOrderByStartTimeDesc(
                                    vehicle, 
                                    SwapTransaction.Status.COMPLETED
                            );

                    if (lastSwap.isPresent() && lastSwap.get().getSwapOutBattery() != null) {
                        Battery currentBattery = lastSwap.get().getSwapOutBattery();
                        info.put("currentBattery", Map.of(
                            "batteryId", currentBattery.getId(),
                            "model", currentBattery.getModel(),
                            "chargeLevel", currentBattery.getChargeLevel(),
                            "stateOfHealth", currentBattery.getStateOfHealth(),
                            "status", currentBattery.getStatus(),
                            "usageCount", currentBattery.getUsageCount()
                        ));
                        info.put("lastSwapTime", lastSwap.get().getStartTime());
                        info.put("hasBattery", true);
                    } else {
                        info.put("currentBattery", null);
                        info.put("hasBattery", false);
                    }

                    return info;
                })
                .collect(Collectors.toList());

        // Th·ªëng k√™
        long vehiclesWithBattery = vehiclesInfo.stream()
                .filter(v -> (Boolean) v.get("hasBattery"))
                .count();

        return ResponseEntity.ok(Map.of(
            "vehicles", vehiclesInfo,
            "totalVehicles", allVehicles.size(),
            "vehiclesWithBattery", vehiclesWithBattery,
            "vehiclesWithoutBattery", allVehicles.size() - vehiclesWithBattery
        ));
    }

    /**
     * üîã Admin xem pin n√†o ƒëang ƒë∆∞·ª£c xe n√†o s·ª≠ d·ª•ng
     * GET /api/vehicle-battery/admin/battery/{batteryId}/vehicle
     */
    @GetMapping("/admin/battery/{batteryId}/vehicle")
    @PreAuthorize("hasAnyAuthority('ADMIN', 'STAFF')")
    public ResponseEntity<Map<String, Object>> getVehicleUsingBattery(@PathVariable Long batteryId) {
        Battery battery = batteryRepository.findById(batteryId)
                .orElseThrow(() -> new NotFoundException("Battery not found"));

        // T√¨m swap transaction g·∫ßn nh·∫•t c√≥ swapOutBattery = battery n√†y
        List<SwapTransaction> transactions = swapTransactionRepository.findAll();
        Optional<SwapTransaction> lastSwapWithThisBattery = transactions.stream()
                .filter(t -> t.getSwapOutBattery() != null && 
                            t.getSwapOutBattery().getId().equals(batteryId) &&
                            t.getStatus() == SwapTransaction.Status.COMPLETED)
                .max(Comparator.comparing(SwapTransaction::getStartTime));

        if (lastSwapWithThisBattery.isEmpty()) {
            return ResponseEntity.ok(Map.of(
                "batteryId", batteryId,
                "batteryModel", battery.getModel(),
                "status", battery.getStatus(),
                "currentStation", battery.getCurrentStation() != null ? battery.getCurrentStation().getName() : "N/A",
                "isBeingUsed", false,
                "message", "Pin n√†y ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c ƒëang ·ªü tr·∫°m"
            ));
        }

        SwapTransaction swap = lastSwapWithThisBattery.get();
        Vehicle vehicle = swap.getVehicle();

        return ResponseEntity.ok(Map.of(
            "batteryId", batteryId,
            "batteryModel", battery.getModel(),
            "chargeLevel", battery.getChargeLevel(),
            "status", battery.getStatus(),
            "isBeingUsed", true,
            "vehicle", Map.of(
                "vehicleId", vehicle.getId(),
                "model", vehicle.getModel(),
                "plateNumber", vehicle.getPlateNumber(),
                "driver", Map.of(
                    "driverId", vehicle.getDriver().getId(),
                    "fullName", vehicle.getDriver().getFullName(),
                    "email", vehicle.getDriver().getEmail()
                )
            ),
            "lastSwap", Map.of(
                "transactionId", swap.getId(),
                "swapTime", swap.getStartTime(),
                "stationName", swap.getStation().getName()
            )
        ));
    }
}
