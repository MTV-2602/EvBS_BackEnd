package com.evbs.BackEndEvBs.service;

import com.evbs.BackEndEvBs.entity.*;
import com.evbs.BackEndEvBs.model.EmailDetail;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.math.BigDecimal;

@Service
public class EmailService {

    private static final Logger log = LoggerFactory.getLogger(EmailService.class);

    @Autowired
    TemplateEngine templateEngine;

    @Autowired
    JavaMailSender mailSender;

    @Value("${spring.mail.username}")
    private String fromEmail;

    /**
     * G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch booking
     */
    public void sendBookingConfirmationEmail(EmailDetail emailDetail){
        try {
            Context context = new Context();
            context.setVariable("customerName", emailDetail.getFullName());
            context.setVariable("bookingId", emailDetail.getBookingId());
            context.setVariable("stationName", emailDetail.getStationName());
            context.setVariable("stationLocation", emailDetail.getStationLocation());
            context.setVariable("stationContact", emailDetail.getStationContact());
            context.setVariable("bookingTime", emailDetail.getBookingTime());
            context.setVariable("vehicleModel", emailDetail.getVehicleModel());
            context.setVariable("batteryType", emailDetail.getBatteryType());
            context.setVariable("status", emailDetail.getStatus());

            String text = templateEngine.process("booking-confirmation", context);

            // creating a simple mail message
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage, "UTF-8");

            // setting up necessary details
            mimeMessageHelper.setFrom(fromEmail);
            mimeMessageHelper.setTo(emailDetail.getRecipient());
            mimeMessageHelper.setText(text , true);
            mimeMessageHelper.setSubject(emailDetail.getSubject());
            mailSender.send(mimeMessage);

        } catch (MessagingException e) {
            // Log error nh∆∞ng kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng booking
            System.err.println("Failed to send booking confirmation email: " + e.getMessage());
            e.printStackTrace();
        }
    }


    /**
     * G·ª≠i email th√¥ng b√°o booking ƒë√£ ƒë∆∞·ª£c confirm v·ªõi confirmation code
     */
    public void sendBookingConfirmedEmail(EmailDetail emailDetail){
        try {
            Context context = new Context();
            context.setVariable("customerName", emailDetail.getFullName());
            context.setVariable("bookingId", emailDetail.getBookingId());
            context.setVariable("stationName", emailDetail.getStationName());
            context.setVariable("stationLocation", emailDetail.getStationLocation());
            context.setVariable("stationContact", emailDetail.getStationContact());
            context.setVariable("bookingTime", emailDetail.getBookingTime());
            context.setVariable("vehicleModel", emailDetail.getVehicleModel());
            context.setVariable("batteryType", emailDetail.getBatteryType());
            context.setVariable("status", emailDetail.getStatus());
            context.setVariable("confirmationCode", emailDetail.getConfirmationCode());
            context.setVariable("confirmedBy", emailDetail.getConfirmedBy());

            String text = templateEngine.process("booking-confirmed", context);

            // creating a simple mail message
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage, "UTF-8");

            // setting up necessary details
            mimeMessageHelper.setFrom(fromEmail);
            mimeMessageHelper.setTo(emailDetail.getRecipient());
            mimeMessageHelper.setText(text , true);
            mimeMessageHelper.setSubject(emailDetail.getSubject());
            mailSender.send(mimeMessage);

        } catch (MessagingException e) {
            // Log error nh∆∞ng kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng booking
            System.err.println("Failed to send booking confirmed email: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o thanh to√°n th√†nh c√¥ng
     *
     * @param driver Th√¥ng tin driver nh·∫≠n email
     * @param payment Th√¥ng tin thanh to√°n
     * @param servicePackage Th√¥ng tin g√≥i d·ªãch v·ª• ƒë√£ mua
     */
    public void sendPaymentSuccessEmail(User driver, Payment payment, ServicePackage servicePackage) {
        try {
            log.info("ƒêang g·ª≠i email thanh to√°n th√†nh c√¥ng cho driver: {}", driver.getEmail());

            Context context = createPaymentEmailContext(driver, payment, servicePackage);

            // Render template
            String htmlContent = templateEngine.process("payment-success-email", context);

            // T·∫°o email message
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage, "UTF-8");

            // Thi·∫øt l·∫≠p th√¥ng tin email
            mimeMessageHelper.setFrom(fromEmail);
            mimeMessageHelper.setTo(driver.getEmail());
            mimeMessageHelper.setText(htmlContent, true);
            mimeMessageHelper.setSubject("üéâ Thanh to√°n th√†nh c√¥ng - G√≥i d·ªãch v·ª• EV Battery Swap");

            mailSender.send(mimeMessage);

            log.info("Email thanh to√°n th√†nh c√¥ng ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng cho: {}", driver.getEmail());

        } catch (MessagingException e) {
            log.error("L·ªói khi g·ª≠i email thanh to√°n th√†nh c√¥ng cho {}: {}", driver.getEmail(), e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng thanh to√°n
            System.err.println("Failed to send payment success email: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T·∫°o context ch·ª©a d·ªØ li·ªáu cho email template thanh to√°n
     */
    private Context createPaymentEmailContext(User driver, Payment payment, ServicePackage servicePackage) {
        Context context = new Context();

        // Th√¥ng tin driver
        context.setVariable("driverName", driver.getFullName());
        context.setVariable("driverEmail", driver.getEmail());

        // Th√¥ng tin g√≥i d·ªãch v·ª•
        context.setVariable("packageName", servicePackage.getName());
        context.setVariable("validDays", servicePackage.getDuration());
        context.setVariable("swapLimit", servicePackage.getMaxSwaps());
        context.setVariable("packageDescription", servicePackage.getDescription());

        // Th√¥ng tin thanh to√°n
        context.setVariable("paymentId", payment.getId());
        context.setVariable("transactionId", payment.getTransaction() != null ? payment.getTransaction().getId() : "N/A");
        context.setVariable("amount", formatCurrency(payment.getAmount()));
        context.setVariable("paymentMethod", payment.getPaymentMethod());
        context.setVariable("paymentStatus", payment.getStatus());

        // Format ng√†y gi·ªù
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        context.setVariable("paymentDate", payment.getPaymentDate().format(formatter));

        // Th√¥ng tin h·ªá th·ªëng
        context.setVariable("systemName", "EV Battery Swap Station");
        context.setVariable("supportEmail", "sp.evswapstation@gmail.com");

        return context;
    }


    /**
     * G·ª≠i email th√¥ng b√°o ƒë·ªïi pin th√†nh c√¥ng
     *
     * @param driver Th√¥ng tin driver nh·∫≠n email
     * @param swapTransaction Th√¥ng tin giao d·ªãch ƒë·ªïi pin
     */
    public void sendSwapSuccessEmail(User driver, SwapTransaction swapTransaction) {
        try {
            log.info("ƒêang g·ª≠i email ƒë·ªïi pin th√†nh c√¥ng cho driver: {}", driver.getEmail());

            Context context = createSwapEmailContext(driver, swapTransaction);

            // Render template - s·ª≠ d·ª•ng template c√≥ s·∫µn
            String htmlContent = templateEngine.process("payment-success-email", context);

            // T·∫°o email message
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage, "UTF-8");

            // Thi·∫øt l·∫≠p th√¥ng tin email
            mimeMessageHelper.setFrom(fromEmail);
            mimeMessageHelper.setTo(driver.getEmail());
            mimeMessageHelper.setText(htmlContent, true);
            mimeMessageHelper.setSubject("üîã ƒê·ªïi pin th√†nh c√¥ng - EV Battery Swap Station");

            mailSender.send(mimeMessage);

            log.info("Email ƒë·ªïi pin th√†nh c√¥ng ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng cho: {}", driver.getEmail());

        } catch (MessagingException e) {
            log.error("L·ªói khi g·ª≠i email ƒë·ªïi pin th√†nh c√¥ng cho {}: {}", driver.getEmail(), e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng ƒë·ªïi pin
            System.err.println("Failed to send swap success email: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T·∫°o context ch·ª©a d·ªØ li·ªáu cho email template ƒë·ªïi pin
     */
    private Context createSwapEmailContext(User driver, SwapTransaction swapTransaction) {
        Context context = new Context();

        // Th√¥ng tin driver
        context.setVariable("driverName", driver.getFullName());
        context.setVariable("driverEmail", driver.getEmail());

        // Th√¥ng tin giao d·ªãch ƒë·ªïi pin
        context.setVariable("packageName", "D·ªãch v·ª• ƒë·ªïi pin"); // T√™n d·ªãch v·ª•
        context.setVariable("validDays", "Theo g√≥i ƒëƒÉng k√Ω"); // Th·ªùi h·∫°n
        context.setVariable("swapLimit", "Theo g√≥i ƒëƒÉng k√Ω"); // Gi·ªõi h·∫°n l∆∞·ª£t ƒë·ªïi
        context.setVariable("packageDescription", "Thay th·∫ø pin c≈© b·∫±ng pin m·ªõi ƒë∆∞·ª£c s·∫°c ƒë·∫ßy");

        // Th√¥ng tin giao d·ªãch
        context.setVariable("paymentId", swapTransaction.getId());
        context.setVariable("transactionId", swapTransaction.getId());
        context.setVariable("amount", swapTransaction.getCost() != null ? formatCurrency(swapTransaction.getCost()) : "0 VNƒê");
        context.setVariable("paymentMethod", "G√≥i ƒëƒÉng k√Ω");
        context.setVariable("paymentStatus", "Ho√†n th√†nh");

        // Th√¥ng tin chi ti·∫øt ƒë·ªïi pin
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        context.setVariable("paymentDate", swapTransaction.getEndTime() != null ?
                swapTransaction.getEndTime().format(formatter) :
                LocalDateTime.now().format(formatter));

        // Th√¥ng tin tr·∫°m v√† pin
        if (swapTransaction.getStation() != null) {
            context.setVariable("stationName", swapTransaction.getStation().getName());
            context.setVariable("stationLocation", swapTransaction.getStation().getLocation());
        }

        // Th√¥ng tin pin
        String batteryInfo = "";
        if (swapTransaction.getSwapOutBattery() != null) {
            Battery newBattery = swapTransaction.getSwapOutBattery();
            batteryInfo = String.format("Pin m·ªõi: %s (M·ª©c s·∫°c: %.1f%%, T√¨nh tr·∫°ng: %.1f%%)",
                    newBattery.getModel() != null ? newBattery.getModel() : "N/A",
                    newBattery.getChargeLevel() != null ? newBattery.getChargeLevel().doubleValue() : 0.0,
                    newBattery.getStateOfHealth() != null ? newBattery.getStateOfHealth().doubleValue() : 0.0);
        }
        context.setVariable("batteryInfo", batteryInfo);

        // Th√¥ng tin xe
        if (swapTransaction.getVehicle() != null) {
            context.setVariable("vehicleInfo",
                    String.format("Xe: %s (%s)",
                            swapTransaction.getVehicle().getPlateNumber(),
                            swapTransaction.getVehicle().getModel() != null ? swapTransaction.getVehicle().getModel() : "N/A"));
        }

        // Th√¥ng tin h·ªá th·ªëng
        context.setVariable("systemName", "EV Battery Swap Station");
        context.setVariable("supportEmail", "sp.evswapstation@gmail.com");

        return context;
    }

    /**
     * Format s·ªë ti·ªÅn theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
     */
    private String formatCurrency(BigDecimal amount) {
        if (amount == null) {
            return "0 VNƒê";
        }
        NumberFormat formatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        return formatter.format(amount) + " VNƒê";
    }
}