package com.evbs.BackEndEvBs.service;

import com.evbs.BackEndEvBs.entity.DriverSubscription;
import com.evbs.BackEndEvBs.entity.ServicePackage;
import com.evbs.BackEndEvBs.entity.User;
import com.evbs.BackEndEvBs.exception.exceptions.AuthenticationException;
import com.evbs.BackEndEvBs.exception.exceptions.NotFoundException;
import com.evbs.BackEndEvBs.model.request.DriverSubscriptionRequest;
import com.evbs.BackEndEvBs.repository.DriverSubscriptionRepository;
import com.evbs.BackEndEvBs.repository.ServicePackageRepository;
import com.evbs.BackEndEvBs.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class DriverSubscriptionService {

    @Autowired
    private final DriverSubscriptionRepository driverSubscriptionRepository;

    @Autowired
    private final ServicePackageRepository servicePackageRepository;

    @Autowired
    private final AuthenticationService authenticationService;

    @Autowired
    private final UserRepository userRepository;

    /**
     * ‚ùå DEPRECATED - Kh√¥ng d√πng n·ªØa
     * D√πng createSubscriptionAfterPayment() sau khi thanh to√°n th√†nh c√¥ng
     */
    @Deprecated
    @Transactional
    public DriverSubscription createSubscription(DriverSubscriptionRequest request) {
        User currentUser = authenticationService.getCurrentUser();

        if (currentUser.getRole() != User.Role.DRIVER) {
            throw new AuthenticationException("Only drivers can create subscriptions");
        }

        ServicePackage servicePackage = servicePackageRepository.findById(request.getPackageId())
                .orElseThrow(() -> new NotFoundException("Service package not found with id: " + request.getPackageId()));

        // Ki·ªÉm tra driver ƒë√£ c√≥ subscription active ch∆∞a
        driverSubscriptionRepository.findActiveSubscriptionByDriver(currentUser, LocalDate.now())
            .ifPresent(existing -> {
                throw new AuthenticationException(
                    "‚ùå B·∫°n ƒë√£ c√≥ g√≥i d·ªãch v·ª• ACTIVE! " +
                    "G√≥i hi·ªán t·∫°i: " + existing.getServicePackage().getName() + " " +
                    "(c√≤n " + existing.getRemainingSwaps() + " l∆∞·ª£t swap). " +
                    "Vui l√≤ng ƒë·ª£i h·∫øt h·∫°n ho·∫∑c h·ªßy g√≥i c≈© tr∆∞·ªõc khi mua g√≥i m·ªõi."
                );
            });

        // T·ª± ƒë·ªông l·∫•y ng√†y hi·ªán t·∫°i
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusDays(servicePackage.getDuration());

        DriverSubscription subscription = new DriverSubscription();
        subscription.setDriver(currentUser);
        subscription.setServicePackage(servicePackage);
        subscription.setStartDate(startDate);
        subscription.setEndDate(endDate);
        subscription.setStatus(DriverSubscription.Status.ACTIVE);
        subscription.setRemainingSwaps(servicePackage.getMaxSwaps());

        DriverSubscription savedSubscription = driverSubscriptionRepository.save(subscription);
        
        log.info("üì¶ Subscription created for driver {}: Package {} ({} swaps, {} VND)", 
                 currentUser.getEmail(), 
                 servicePackage.getName(),
                 servicePackage.getMaxSwaps(),
                 servicePackage.getPrice());

        return savedSubscription;
    }

    /**
     * ‚úÖ T·∫†O SUBSCRIPTION SAU KHI THANH TO√ÅN TH√ÄNH C√îNG
     * ƒê∆∞·ª£c g·ªçi t·ª´ MoMoService sau khi verify payment
     * 
     * BUSINESS RULES:
     * - ‚ùå C√≥ g√≥i ACTIVE + c√≤n l∆∞·ª£t swap ‚Üí KH√îNG cho mua g√≥i kh√°c
     * - ‚úÖ C√≥ g√≥i ACTIVE + h·∫øt l∆∞·ª£t swap (remainingSwaps = 0) ‚Üí CHO PH√âP mua g√≥i kh√°c
     * - ‚úÖ C√≥ g√≥i EXPIRED ‚Üí CHO PH√âP mua g√≥i m·ªõi
     * - ‚úÖ Kh√¥ng c√≥ g√≥i ‚Üí CHO PH√âP mua g√≥i
     * 
     * WORKFLOW:
     * 1. Driver ch·ªçn packageId ‚Üí T·∫°o MoMo payment URL
     * 2. Driver thanh to√°n MoMo
     * 3. MoMo callback ‚Üí G·ªçi method n√†y
     * 4. Ki·ªÉm tra g√≥i hi·ªán t·∫°i
     * 5. N·∫øu c√≥ g√≥i active + c√≤n l∆∞·ª£t ‚Üí reject
     * 6. N·∫øu h·∫øt l∆∞·ª£t ho·∫∑c h·∫øt h·∫°n ‚Üí expire g√≥i c≈©, t·∫°o g√≥i m·ªõi
     */
    @Transactional
    public DriverSubscription createSubscriptionAfterPayment(Long packageId) {
        User currentUser = authenticationService.getCurrentUser();

        ServicePackage servicePackage = servicePackageRepository.findById(packageId)
                .orElseThrow(() -> new NotFoundException("Service package not found with id: " + packageId));

        // Ki·ªÉm tra driver c√≥ subscription active kh√¥ng
        var activeSubscriptionOpt = driverSubscriptionRepository.findActiveSubscriptionByDriver(currentUser, LocalDate.now());
        
        if (activeSubscriptionOpt.isPresent()) {
            DriverSubscription existingSub = activeSubscriptionOpt.get();
            
            // ‚ùå C√íN L∆Ø·ª¢T SWAP ‚Üí KH√îNG CHO MUA G√ìI KH√ÅC
            if (existingSub.getRemainingSwaps() > 0) {
                throw new AuthenticationException(
                    "‚ùå B·∫°n ƒë√£ c√≥ g√≥i d·ªãch v·ª• ACTIVE v√† c√≤n l∆∞·ª£t swap! " +
                    "G√≥i hi·ªán t·∫°i: " + existingSub.getServicePackage().getName() + " " +
                    "(c√≤n " + existingSub.getRemainingSwaps() + " l∆∞·ª£t swap, " +
                    "h·∫øt h·∫°n: " + existingSub.getEndDate() + "). " +
                    "Vui l√≤ng s·ª≠ d·ª•ng h·∫øt l∆∞·ª£t swap hi·ªán t·∫°i tr∆∞·ªõc khi mua g√≥i m·ªõi."
                );
            }
            
            // ‚úÖ H·∫æT L∆Ø·ª¢T SWAP (remainingSwaps = 0) ‚Üí CHO PH√âP MUA G√ìI M·ªöI
            log.info("üîÑ Driver {} has active subscription but 0 remaining swaps. Expiring old subscription...", 
                     currentUser.getEmail());
            
            // Expire g√≥i c≈©
            existingSub.setStatus(DriverSubscription.Status.EXPIRED);
            driverSubscriptionRepository.save(existingSub);
            
            log.info("‚úÖ Old subscription {} expired (was active but had 0 swaps)", existingSub.getId());
        }

        // ‚úÖ T·∫†O G√ìI M·ªöI (v√¨ kh√¥ng c√≥ g√≥i active ho·∫∑c g√≥i c≈© ƒë√£ h·∫øt l∆∞·ª£t)
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusDays(servicePackage.getDuration());

        DriverSubscription subscription = new DriverSubscription();
        subscription.setDriver(currentUser);
        subscription.setServicePackage(servicePackage);
        subscription.setStartDate(startDate);
        subscription.setEndDate(endDate);
        subscription.setStatus(DriverSubscription.Status.ACTIVE); // ‚úÖ ACTIVE ngay v√¨ ƒë√£ thanh to√°n r·ªìi
        subscription.setRemainingSwaps(servicePackage.getMaxSwaps());

        DriverSubscription savedSubscription = driverSubscriptionRepository.save(subscription);
        
        log.info("‚úÖ Subscription created after payment: Driver {} ‚Üí Package {} ({} swaps, {} VND)", 
                 currentUser.getEmail(), 
                 servicePackage.getName(),
                 servicePackage.getMaxSwaps(),
                 servicePackage.getPrice());

        return savedSubscription;
    }

    /**
     * ‚úÖ T·∫†O SUBSCRIPTION SAU KHI THANH TO√ÅN (v·ªõi driverId)
     * 
     * Overload method d√πng cho payment gateway callback (MoMo)
     * khi kh√¥ng c√≥ authentication token
     * 
     * @param packageId ID c·ªßa package
     * @param driverId ID c·ªßa driver (l·∫•y t·ª´ extraData)
     * @return DriverSubscription ƒë√£ t·∫°o
     */
    @Transactional
    public DriverSubscription createSubscriptionAfterPayment(Long packageId, Long driverId) {
        // T√¨m driver by ID thay v√¨ getCurrentUser()
        User driver = userRepository.findById(driverId)
                .orElseThrow(() -> new NotFoundException("Driver not found with id: " + driverId));

        ServicePackage servicePackage = servicePackageRepository.findById(packageId)
                .orElseThrow(() -> new NotFoundException("Service package not found with id: " + packageId));

        // Ki·ªÉm tra driver c√≥ subscription active kh√¥ng
        var activeSubscriptionOpt = driverSubscriptionRepository.findActiveSubscriptionByDriver(driver, LocalDate.now());
        
        if (activeSubscriptionOpt.isPresent()) {
            DriverSubscription existingSub = activeSubscriptionOpt.get();
            
            // ‚ùå C√íN L∆Ø·ª¢T SWAP ‚Üí KH√îNG CHO MUA G√ìI KH√ÅC
            if (existingSub.getRemainingSwaps() > 0) {
                throw new AuthenticationException(
                    "‚ùå Driver ƒë√£ c√≥ g√≥i d·ªãch v·ª• ACTIVE v√† c√≤n l∆∞·ª£t swap! " +
                    "G√≥i hi·ªán t·∫°i: " + existingSub.getServicePackage().getName() + " " +
                    "(c√≤n " + existingSub.getRemainingSwaps() + " l∆∞·ª£t swap, " +
                    "h·∫øt h·∫°n: " + existingSub.getEndDate() + "). "
                );
            }
            
            // ‚úÖ H·∫æT L∆Ø·ª¢T SWAP (remainingSwaps = 0) ‚Üí CHO PH√âP MUA G√ìI M·ªöI
            log.info("üîÑ Driver {} has active subscription but 0 swaps remaining. Expiring old subscription...", 
                     driver.getEmail());
            
            // Expire g√≥i c≈©
            existingSub.setStatus(DriverSubscription.Status.EXPIRED);
            driverSubscriptionRepository.save(existingSub);
            
            log.info("‚úÖ Old subscription {} expired (was active but had 0 swaps)", existingSub.getId());
        }

        // ‚úÖ T·∫†O G√ìI M·ªöI (v√¨ kh√¥ng c√≥ g√≥i active ho·∫∑c g√≥i c≈© ƒë√£ h·∫øt l∆∞·ª£t)
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusDays(servicePackage.getDuration());

        DriverSubscription subscription = new DriverSubscription();
        subscription.setDriver(driver);
        subscription.setServicePackage(servicePackage);
        subscription.setStartDate(startDate);
        subscription.setEndDate(endDate);
        subscription.setStatus(DriverSubscription.Status.ACTIVE);
        subscription.setRemainingSwaps(servicePackage.getMaxSwaps());

        DriverSubscription savedSubscription = driverSubscriptionRepository.save(subscription);
        
        log.info("‚úÖ Subscription created after payment (callback): Driver {} ‚Üí Package {} ({} swaps, {} VND)", 
                 driver.getEmail(), 
                 servicePackage.getName(),
                 servicePackage.getMaxSwaps(),
                 servicePackage.getPrice());

        return savedSubscription;
    }

    @Transactional(readOnly = true)
    public List<DriverSubscription> getAllSubscriptions() {
        User currentUser = authenticationService.getCurrentUser();
        if (currentUser.getRole() != User.Role.ADMIN) {
            throw new AuthenticationException("Access denied. Admin role required.");
        }
        return driverSubscriptionRepository.findAll();
    }

    @Transactional(readOnly = true)
    public List<DriverSubscription> getMySubscriptions() {
        User currentUser = authenticationService.getCurrentUser();
        if (currentUser.getRole() != User.Role.DRIVER) {
            throw new AuthenticationException("Only drivers can view their subscriptions");
        }
        return driverSubscriptionRepository.findByDriver_Id(currentUser.getId());
    }

    @Transactional
    public DriverSubscription updateSubscription(Long id, DriverSubscriptionRequest request) {
        User currentUser = authenticationService.getCurrentUser();
        if (currentUser.getRole() != User.Role.ADMIN) {
            throw new AuthenticationException("Access denied. Admin role required.");
        }

        DriverSubscription existingSubscription = driverSubscriptionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Driver subscription not found with id: " + id));

        if (request.getPackageId() != null) {
            ServicePackage servicePackage = servicePackageRepository.findById(request.getPackageId())
                    .orElseThrow(() -> new NotFoundException("Service package not found with id: " + request.getPackageId()));
            existingSubscription.setServicePackage(servicePackage);

            // T√≠nh l·∫°i end date khi ƒë·ªïi g√≥i
            LocalDate endDate = existingSubscription.getStartDate().plusDays(servicePackage.getDuration());
            existingSubscription.setEndDate(endDate);

            // ‚úÖ Reset remainingSwaps khi ƒë·ªïi g√≥i
            existingSubscription.setRemainingSwaps(servicePackage.getMaxSwaps());
        }

        return driverSubscriptionRepository.save(existingSubscription);
    }

    @Transactional
    public void deleteSubscription(Long id) {
        User currentUser = authenticationService.getCurrentUser();
        if (currentUser.getRole() != User.Role.ADMIN) {
            throw new AuthenticationException("Access denied. Admin role required.");
        }

        DriverSubscription subscription = driverSubscriptionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Driver subscription not found with id: " + id));

        driverSubscriptionRepository.delete(subscription);
    }
}