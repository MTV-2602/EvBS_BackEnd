package com.evbs.BackEndEvBs.service;

import com.evbs.BackEndEvBs.entity.Booking;
import com.evbs.BackEndEvBs.entity.DriverSubscription;
import com.evbs.BackEndEvBs.entity.Station;
import com.evbs.BackEndEvBs.entity.User;
import com.evbs.BackEndEvBs.entity.Vehicle;
import com.evbs.BackEndEvBs.exception.exceptions.AuthenticationException;
import com.evbs.BackEndEvBs.exception.exceptions.NotFoundException;
import com.evbs.BackEndEvBs.model.EmailDetail;
import com.evbs.BackEndEvBs.model.request.BookingRequest;
import com.evbs.BackEndEvBs.repository.BookingRepository;
import com.evbs.BackEndEvBs.repository.DriverSubscriptionRepository;
import com.evbs.BackEndEvBs.repository.StationRepository;
import com.evbs.BackEndEvBs.repository.VehicleRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.format.DateTimeFormatter;
import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
public class BookingService {

    @Autowired
    private final BookingRepository bookingRepository;

    @Autowired
    private final VehicleRepository vehicleRepository;

    @Autowired
    private final StationRepository stationRepository;

    @Autowired
    private final DriverSubscriptionRepository driverSubscriptionRepository;

    @Autowired
    private final AuthenticationService authenticationService;

    @Autowired
    private EmailService emailService;

    /**
     * CREATE - T·∫°o booking m·ªõi (Driver)
     * 
     * ‚úÖ B·∫ÆT BU·ªòC PH·∫¢I C√ì SUBSCRIPTION:
     * - Driver ph·∫£i c√≥ subscription ACTIVE
     * - RemainingSwaps > 0
     * - StartDate <= Today <= EndDate
     */
    @Transactional
    public Booking createBooking(BookingRequest request) {
        User currentUser = authenticationService.getCurrentUser();

        // ‚úÖ VALIDATION 0: B·∫ÆT BU·ªòC ph·∫£i c√≥ subscription ACTIVE
        DriverSubscription activeSubscription = driverSubscriptionRepository
                .findActiveSubscriptionByDriver(currentUser, LocalDate.now())
                .orElseThrow(() -> new AuthenticationException(
                        "‚ùå B·∫ÆT BU·ªòC: B·∫°n ph·∫£i mua g√≥i d·ªãch v·ª• tr∆∞·ªõc khi booking. " +
                        "Vui l√≤ng mua ServicePackage v√† t·∫°o DriverSubscription tr∆∞·ªõc."
                ));

        // ‚úÖ VALIDATION 1: Ki·ªÉm tra c√≤n l∆∞·ª£t swap kh√¥ng
        if (activeSubscription.getRemainingSwaps() <= 0) {
            throw new AuthenticationException(
                    "‚ùå G√≥i d·ªãch v·ª• c·ªßa b·∫°n ƒë√£ h·∫øt l∆∞·ª£t swap. " +
                    "Vui l√≤ng gia h·∫°n ho·∫∑c mua g√≥i m·ªõi."
            );
        }

        //Ki·ªÉm tra driver ƒë√£ c√≥ booking ƒëang ho·∫°t ƒë·ªông ch∆∞a
        List<Booking> activeBookings = bookingRepository.findByDriverAndStatusNotIn(
                currentUser,
                List.of(Booking.Status.CANCELLED, Booking.Status.COMPLETED)
        );

        if (!activeBookings.isEmpty()) {
            throw new AuthenticationException("You already have an active booking. Please Complete or Cancel it before creating a new one.");
        }

        // Validate vehicle thu·ªôc v·ªÅ driver
        Vehicle vehicle = vehicleRepository.findById(request.getVehicleId())
                .orElseThrow(() -> new NotFoundException("Vehicle not found"));

        if (!vehicle.getDriver().getId().equals(currentUser.getId())) {
            throw new AuthenticationException("Vehicle does not belong to current user");
        }

        // Validate station
        Station station = stationRepository.findById(request.getStationId())
                .orElseThrow(() -> new NotFoundException("Station not found"));

        // Validate station c√≥ c√πng lo·∫°i pin v·ªõi xe
        if (!station.getBatteryType().getId().equals(vehicle.getBatteryType().getId())) {
            throw new AuthenticationException("Station does not support the battery type of your vehicle");
        }

        // T·∫°o booking th·ªß c√¥ng thay v√¨ d√πng ModelMapper ƒë·ªÉ tr√°nh conflict
        Booking booking = new Booking();
        booking.setDriver(currentUser);
        booking.setVehicle(vehicle);
        booking.setStation(station);
        booking.setBookingTime(request.getBookingTime());
        
        // ‚≠ê THAY ƒê·ªîI: KH√îNG generate code khi t·∫°o booking
        // Code s·∫Ω ƒë∆∞·ª£c generate khi Staff/Admin CONFIRM booking
        booking.setConfirmationCode(null);
        booking.setStatus(Booking.Status.PENDING);

        Booking savedBooking = bookingRepository.save(booking);

        // G·ª≠i email x√°c nh·∫≠n booking
        sendBookingConfirmationEmail(savedBooking, currentUser, vehicle, station);

        return savedBooking;
    }

    /**
     * G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch
     */
    private void sendBookingConfirmationEmail(Booking booking, User driver, Vehicle vehicle, Station station) {
        try {
            //T·∫°o email detail
            EmailDetail emailDetail = new EmailDetail();
            emailDetail.setRecipient(driver.getEmail());
            emailDetail.setSubject("X√°c nh·∫≠n ƒë·∫∑t l·ªãch thay pin - EV Battery Swap");
            emailDetail.setFullName(driver.getFullName());

            // Th√¥ng tin booking
            emailDetail.setBookingId(booking.getId());
            emailDetail.setStationName(station.getName());
            emailDetail.setStationLocation(
                    station.getLocation() != null ? station.getLocation() :
                            (station.getDistrict() + ", " + station.getCity())
            );
            emailDetail.setStationContact(station.getContactInfo() != null ? station.getContactInfo() : "Ch∆∞a c·∫≠p nh·∫≠t");

            // Format th·ªùi gian
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm - dd/MM/yyyy");
            emailDetail.setBookingTime(booking.getBookingTime().format(formatter));

            emailDetail.setVehicleModel(vehicle.getModel() != null ? vehicle.getModel() : vehicle.getPlateNumber());
            emailDetail.setBatteryType(
                    station.getBatteryType().getName() +
                            (station.getBatteryType().getCapacity() != null ? " - " + station.getBatteryType().getCapacity() + "kWh" : "")
            );
            emailDetail.setStatus(booking.getStatus().toString());

            // G·ª≠i email b·∫•t ƒë·ªìng b·ªô (kh√¥ng ch·∫∑n lu·ªìng ch√≠nh)
            emailService.sendBookingConfirmationEmail(emailDetail);
        } catch (Exception e) {
            // Log l·ªói nh∆∞ng kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn booking
            System.err.println("Failed to send booking confirmation email: " + e.getMessage());
        }
    }

    /**
     * READ - L·∫•y bookings c·ªßa driver hi·ªán t·∫°i
     */
    @Transactional(readOnly = true)
    public List<Booking> getMyBookings() {
        User currentUser = authenticationService.getCurrentUser();
        return bookingRepository.findByDriver(currentUser);
    }

    /**
     * READ - L·∫•y booking c·ª• th·ªÉ c·ªßa driver
     */
    @Transactional(readOnly = true)
    public Booking getMyBooking(Long id) {
        User currentUser = authenticationService.getCurrentUser();
        return bookingRepository.findByIdAndDriver(id, currentUser)
                .orElseThrow(() -> new NotFoundException("Booking not found"));
    }

    /**
     * READ - L·∫•y stations t∆∞∆°ng th√≠ch v·ªõi vehicle (Public)
     */
    @Transactional(readOnly = true)
    public List<Station> getCompatibleStations(Long vehicleId) {
        Vehicle vehicle = vehicleRepository.findById(vehicleId)
                .orElseThrow(() -> new NotFoundException("Vehicle not found"));

        // L·∫•y t·∫•t c·∫£ stations c√≥ c√πng battery type v·ªõi vehicle v√† status ACTIVE
        return stationRepository.findByBatteryTypeAndStatus(
                vehicle.getBatteryType(),
                Station.Status.ACTIVE
        );
    }

    // ... (c√°c method kh√°c gi·ªØ nguy√™n)

    /**
     * UPDATE - H·ªßy booking (Driver)
     */
    @Transactional
    public Booking cancelMyBooking(Long id) {
        User currentUser = authenticationService.getCurrentUser();
        Booking booking = bookingRepository.findByIdAndDriver(id, currentUser)
                .orElseThrow(() -> new NotFoundException("Booking not found"));

        // Ki·ªÉm tra tr·∫°ng th√°i booking - ch·ªâ cho ph√©p h·ªßy khi status l√† PENDING
        if (booking.getStatus() != Booking.Status.PENDING) {
            String message = String.format("Cannot cancel booking with status '%s'. Only PENDING bookings can be cancelled by driver.",
                    booking.getStatus());
            throw new AuthenticationException(message);
        }

        booking.setStatus(Booking.Status.CANCELLED);
        return bookingRepository.save(booking);
    }

    /**
     * READ - L·∫•y t·∫•t c·∫£ bookings (Admin/Staff only)
     */
    @Transactional(readOnly = true)
    public List<Booking> getAllBookings() {
        User currentUser = authenticationService.getCurrentUser();
        if (!isAdminOrStaff(currentUser)) {
            throw new AuthenticationException("Access denied");
        }
        return bookingRepository.findAll();
    }

    /**
     * UPDATE - C·∫≠p nh·∫≠t booking status (Admin/Staff only)
     */
    @Transactional
    public Booking updateBookingStatus(Long id, Booking.Status newStatus) {
        User currentUser = authenticationService.getCurrentUser();
        if (!isAdminOrStaff(currentUser)) {
            throw new AuthenticationException("Access denied");
        }

        Booking booking = bookingRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Booking not found"));

        Booking.Status currentStatus = booking.getStatus();

        // üîπ Kh√¥ng cho ƒë·ªïi sang c√πng tr·∫°ng th√°i
        if (currentStatus == newStatus) {
            throw new AuthenticationException("Booking already has status: " + newStatus);
        }

        // üîπ Ki·ªÉm tra logic chuy·ªÉn tr·∫°ng th√°i h·ª£p l·ªá
        switch (currentStatus) {
            case PENDING -> {
                if (newStatus != Booking.Status.CONFIRMED && newStatus != Booking.Status.CANCELLED) {
                    throw new AuthenticationException("Cannot change from PENDING to " + newStatus);
                }
            }
            case CONFIRMED -> {
                if (newStatus != Booking.Status.COMPLETED && newStatus != Booking.Status.CANCELLED) {
                    throw new AuthenticationException("Cannot change from CONFIRMED to " + newStatus);
                }
            }
            case COMPLETED, CANCELLED -> {
                throw new AuthenticationException("Cannot change status of a finished booking.");
            }
        }

        // üîπ N·∫øu h·ª£p l·ªá, c·∫≠p nh·∫≠t
        booking.setStatus(newStatus);
        return bookingRepository.save(booking);
    }

    /**
     * DELETE - X√≥a booking (Admin only)
     */
    @Transactional
    public void deleteBooking(Long id) {
        User currentUser = authenticationService.getCurrentUser();
        if (currentUser.getRole() != User.Role.ADMIN) {
            throw new AuthenticationException("Access denied");
        }

        Booking booking = bookingRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Booking not found"));
        bookingRepository.delete(booking);
    }

    /**
     * READ - L·∫•y bookings theo station (Admin/Staff only)
     */
    @Transactional(readOnly = true)
    public List<Booking> getBookingsByStation(Long stationId) {
        User currentUser = authenticationService.getCurrentUser();
        if (!isAdminOrStaff(currentUser)) {
            throw new AuthenticationException("Access denied");
        }
        return bookingRepository.findByStationId(stationId);
    }

    /**
     * READ - L·∫•y bookings theo status (Admin/Staff only)
     */
    @Transactional(readOnly = true)
    public List<Booking> getBookingsByStatus(Booking.Status status) {
        User currentUser = authenticationService.getCurrentUser();
        if (!isAdminOrStaff(currentUser)) {
            throw new AuthenticationException("Access denied");
        }
        return bookingRepository.findByStatus(status);
    }

    /**
     * ‚úÖ CONFIRM BOOKING BY ID (Staff/Admin only)
     * 
     * Khi Staff/Admin confirm booking:
     * 1. Generate m√£ x√°c nh·∫≠n 6 k√Ω t·ª± (ABC123)
     * 2. Chuy·ªÉn status: PENDING ‚Üí CONFIRMED
     * 3. Tr·∫£ code cho driver
     * 
     * Driver s·∫Ω d√πng code n√†y ƒë·ªÉ t·ª± swap pin t·∫°i tr·∫°m
     */
    @Transactional
    public Booking confirmBookingById(Long bookingId) {
        User currentUser = authenticationService.getCurrentUser();
        if (!isAdminOrStaff(currentUser)) {
            throw new AuthenticationException("‚ùå Ch·ªâ Staff/Admin m·ªõi ƒë∆∞·ª£c confirm booking");
        }

        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new NotFoundException("‚ùå Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId));

        if (booking.getStatus() != Booking.Status.PENDING) {
            throw new AuthenticationException(
                    "‚ùå Ch·ªâ confirm ƒë∆∞·ª£c booking PENDING. " +
                    "Booking n√†y ƒëang ·ªü tr·∫°ng th√°i: " + booking.getStatus()
            );
        }

        // ‚≠ê GENERATE CODE KHI CONFIRM (kh√¥ng ph·∫£i khi t·∫°o booking)
        String confirmationCode = com.evbs.BackEndEvBs.util.ConfirmationCodeGenerator.generateUnique(
            10, // Th·ª≠ t·ªëi ƒëa 10 l·∫ßn
            code -> bookingRepository.findByConfirmationCode(code).isPresent()
        );
        booking.setConfirmationCode(confirmationCode);
        booking.setStatus(Booking.Status.CONFIRMED);
        booking.setConfirmedBy(currentUser);  // ‚≠ê L∆ØU NG∆Ø·ªúI CONFIRM
        
        return bookingRepository.save(booking);
    }

    /**
     * ‚úÖ VERIFY BOOKING BY CONFIRMATION CODE (Staff only)
     * 
     * Staff nh·∫≠p confirmation code (ABC123) t·ª´ driver
     * ‚Üí Tr·∫£ v·ªÅ th√¥ng tin booking ƒë·ªÉ x√°c nh·∫≠n
     * ‚Üí Staff c√≥ th·ªÉ confirm booking (PENDING ‚Üí CONFIRMED)
     */
    @Transactional(readOnly = true)
    public Booking verifyBookingByCode(String confirmationCode) {
        User currentStaff = authenticationService.getCurrentUser();
        if (currentStaff.getRole() != User.Role.STAFF) {
            throw new AuthenticationException("‚ùå Ch·ªâ Staff m·ªõi ƒë∆∞·ª£c verify booking");
        }

        Booking booking = bookingRepository.findByConfirmationCode(confirmationCode)
                .orElseThrow(() -> new NotFoundException(
                        "‚ùå Kh√¥ng t√¨m th·∫•y booking v·ªõi m√£: " + confirmationCode
                ));

        // Ki·ªÉm tra status - ch·ªâ cho verify booking PENDING ho·∫∑c CONFIRMED
        if (booking.getStatus() == Booking.Status.COMPLETED || 
            booking.getStatus() == Booking.Status.CANCELLED) {
            throw new AuthenticationException(
                    "‚ùå Booking n√†y ƒë√£ " + booking.getStatus() + 
                    " (kh√¥ng th·ªÉ swap n·ªØa)"
            );
        }

        return booking;
    }

    /**
     * ‚úÖ CONFIRM BOOKING BY CODE (Staff only) - DEPRECATED
     * 
     * Sau khi verify, staff confirm booking
     * PENDING ‚Üí CONFIRMED
     * 
     * CH∆ØA TR·ª™ remainingSwaps (ch·ªâ tr·ª´ khi swap ho√†n t·∫•t)
     * 
     * @deprecated Use confirmBookingById(Long bookingId) instead
     */
    @Deprecated
    @Transactional
    public Booking confirmBookingByCode(String confirmationCode) {
        User currentStaff = authenticationService.getCurrentUser();
        if (currentStaff.getRole() != User.Role.STAFF) {
            throw new AuthenticationException("‚ùå Ch·ªâ Staff m·ªõi ƒë∆∞·ª£c confirm booking");
        }

        Booking booking = bookingRepository.findByConfirmationCode(confirmationCode)
                .orElseThrow(() -> new NotFoundException(
                        "‚ùå Kh√¥ng t√¨m th·∫•y booking v·ªõi m√£: " + confirmationCode
                ));

        if (booking.getStatus() != Booking.Status.PENDING) {
            throw new AuthenticationException(
                    "‚ùå Ch·ªâ confirm ƒë∆∞·ª£c booking PENDING. " +
                    "Booking n√†y ƒëang ·ªü tr·∫°ng th√°i: " + booking.getStatus()
            );
        }

        booking.setStatus(Booking.Status.CONFIRMED);
        return bookingRepository.save(booking);
    }

    // ==================== HELPER METHODS ====================

    private boolean isAdminOrStaff(User user) {
        return user.getRole() == User.Role.ADMIN || user.getRole() == User.Role.STAFF;
    }
}